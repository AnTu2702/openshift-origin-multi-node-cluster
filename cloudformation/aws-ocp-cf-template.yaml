AWSTemplateFormatVersion: '2010-09-09'
Metadata: {}

Parameters:
###########
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'

Mappings:
#########
  RegionMap:
    eu-central-1:
      CentOS7: "ami-9a183671"

Resources:
##########
  openshiftvpc:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: 10.0.0.0/24
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: openshift-cf-vpc

  internetgatewayos:
    Type: AWS::EC2::InternetGateway

  gatewayattachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref internetgatewayos
      VpcId: !Ref openshiftvpc

  subnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref openshiftvpc
      CidrBlock: 10.0.0.0/27
      AvailabilityZone: eu-central-1a

  subnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref openshiftvpc
      CidrBlock: 10.0.0.32/27
      AvailabilityZone: eu-central-1b

  subnet3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref openshiftvpc
      CidrBlock: 10.0.0.64/27
      AvailabilityZone: eu-central-1c

  routetable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref openshiftvpc

  subnetroutetableasoc1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
     RouteTableId: !Ref routetable
     SubnetId: !Ref subnet1

  subnetroutetableasoc2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
     RouteTableId: !Ref routetable
     SubnetId: !Ref subnet2

  subnetroutetableasoc3:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
     RouteTableId: !Ref routetable
     SubnetId: !Ref subnet3

  route:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref routetable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref internetgatewayos

  openshiftmaster:
    Type: 'AWS::EC2::Instance'
    Properties:
      Tags:
      - Key: Name
        Value: openshift-master
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      AvailabilityZone: eu-central-1a
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: !Ref subnet1
          GroupSet:
             - !Ref mastersecgroup
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", CentOS7]

  openshiftworker1:
    Type: 'AWS::EC2::Instance'
    Properties:
      Tags:
      - Key: Name
        Value: openshift-worker1
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      AvailabilityZone: eu-central-1a
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: !Ref subnet1
          GroupSet:
             - !Ref workersecgroup
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", CentOS7]

  openshiftworker2:
    Type: 'AWS::EC2::Instance'
    Properties:
      Tags:
      - Key: Name
        Value: openshift-worker2
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      AvailabilityZone: eu-central-1b
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: !Ref subnet2
          GroupSet:
           - !Ref workersecgroup
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", CentOS7]

  openshiftworker3:
    Type: 'AWS::EC2::Instance'
    Properties:
      Tags:
      - Key: Name
        Value: openshift-worker3
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      AvailabilityZone: eu-central-1c
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: !Ref subnet3
          GroupSet:
           - !Ref workersecgroup
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", CentOS7]

### EIP

  IPAssoc:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref openshiftmaster
      EIP: "<<elastic ip for openshift-master>>"

  IPAssoc:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref openshiftworker1
      EIP: "<<elastic ip for openshift-worker1>>"

  IPAssoc:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref openshiftworker2
      EIP: "<<elastic ip for openshift-worker2>>"

  IPAssoc:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref openshiftworker3
      EIP: "<<elastic ip for openshift-worker3>>"

### Docker Volumes

  volume0d:
    Type: 'AWS::EC2::Volume'
    Properties:
      AvailabilityZone: !GetAtt openshiftmaster.AvailabilityZone
      Size: 12 

  volat0d:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      Device: '/dev/xvdb'
      VolumeId: !Ref volume0d
      InstanceId: !Ref openshiftmaster

  volume1d:
    Type: 'AWS::EC2::Volume'
    Properties:
      AvailabilityZone: !GetAtt openshiftworker1.AvailabilityZone
      Size: 12
    DeletionPolicy: Delete

  volat1d:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      Device: '/dev/xvdb'
      VolumeId: !Ref volume1d
      InstanceId: !Ref openshiftworker1

  volume2d:
    Type: 'AWS::EC2::Volume'
    Properties:
      AvailabilityZone: !GetAtt openshiftworker2.AvailabilityZone
      Size: 12
    DeletionPolicy: Delete

  volat2d:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      Device: '/dev/xvdb'
      VolumeId: !Ref volume2d
      InstanceId: !Ref openshiftworker2

  volume3d:
    Type: 'AWS::EC2::Volume'
    Properties:
      AvailabilityZone: !GetAtt openshiftworker3.AvailabilityZone
      Size: 12
    DeletionPolicy: Delete

  volat3d:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      Device: '/dev/xvdb'
      VolumeId: !Ref volume3d
      InstanceId: !Ref openshiftworker3

  ### GlusterFS Volumes

  volume1g:
    Type: 'AWS::EC2::Volume'
    Properties:
      AvailabilityZone: !GetAtt openshiftworker1.AvailabilityZone
      Size: 16
    DeletionPolicy: Delete

  volat1g:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      Device: '/dev/xvdc'
      VolumeId: !Ref volume1g
      InstanceId: !Ref openshiftworker1

  volume2g:
    Type: 'AWS::EC2::Volume'
    Properties:
      AvailabilityZone: !GetAtt openshiftworker2.AvailabilityZone
      Size: 16
    DeletionPolicy: Delete

  volat2g:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      Device: '/dev/xvdc'
      VolumeId: !Ref volume2g
      InstanceId: !Ref openshiftworker2

  volume3g:
    Type: 'AWS::EC2::Volume'
    Properties:
      AvailabilityZone: !GetAtt openshiftworker3.AvailabilityZone
      Size: 16
    DeletionPolicy: Delete

  volat3g:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      Device: '/dev/xvdc'
      VolumeId: !Ref volume3g
      InstanceId: !Ref openshiftworker3

  ### Swap Volumes

  #volume0s:
  #  Type: 'AWS::EC2::Volume'
  #  Properties:
  #    AvailabilityZone: !GetAtt openshiftmaster.AvailabilityZone
  #    Size: 2
  #  DeletionPolicy: Delete

  #volat0s:
  #  Type: AWS::EC2::VolumeAttachment
  #  Properties:
  #    Device: '/dev/xvdd'
  #    VolumeId: !Ref volume0s
  #    InstanceId: !Ref openshiftmaster

  #volume1s:
  #  Type: 'AWS::EC2::Volume'
  #  Properties:
  #    AvailabilityZone: !GetAtt openshiftworker1.AvailabilityZone
  #    Size: 2
  #  DeletionPolicy: Delete

  #volat1s:
  #  Type: AWS::EC2::VolumeAttachment
  #  Properties:
  #    Device: '/dev/xvdd'
  #    VolumeId: !Ref volume1s
  #    InstanceId: !Ref openshiftworker1

  #volume2s:
  #  Type: 'AWS::EC2::Volume'
  #  Properties:
  #    AvailabilityZone: !GetAtt openshiftworker2.AvailabilityZone
  #    Size: 2
  #  DeletionPolicy: Delete

  #volat2s:
  #  Type: AWS::EC2::VolumeAttachment
  #  Properties:
  #    Device: '/dev/xvdd'
  #    VolumeId: !Ref volume2s
  #    InstanceId: !Ref openshiftworker2

  #volume3s:
  #  Type: 'AWS::EC2::Volume'
  #  Properties:
  #    AvailabilityZone: !GetAtt openshiftworker3.AvailabilityZone
  #    Size: 2
  #  DeletionPolicy: Delete

  #volat3s:
  #  Type: AWS::EC2::VolumeAttachment
  #  Properties:
  #    Device: '/dev/xvdd'
  #    VolumeId: !Ref volume3s
  #    InstanceId: !Ref openshiftworker3

### Security Groups

  workersecgroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref openshiftvpc
      GroupDescription: Security group for the worker Kubernetes nodes
      SecurityGroupIngress:
      - IpProtocol: -1
        FromPort: -1
        ToPort: -1
        CidrIp: 10.0.0.0/24
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0

  mastersecgroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref openshiftvpc
      GroupDescription: Security group for the master Kubernetes node
      SecurityGroupIngress:
      - IpProtocol: -1
        FromPort: -1
        ToPort: -1
        CidrIp: 10.0.0.0/24
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '8443'
        ToPort: '8443'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '10250'
        ToPort: '10250'
        CidrIp: 0.0.0.0/0
